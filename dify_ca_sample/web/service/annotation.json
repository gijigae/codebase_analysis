{
    "highlights": "The key features of the code you provided are:\n\n1. **API Wrapper Functions**: The code defines a set of functions that act as a wrapper around various API endpoints related to annotations. These functions include `fetchAnnotationConfig`, `updateAnnotationStatus`, `updateAnnotationScore`, `queryAnnotationJobStatus`, `fetchAnnotationList`, `fetchExportAnnotationList`, `addAnnotation`, `annotationBatchImport`, `checkAnnotationBatchImportProgress`, `editAnnotation`, `delAnnotation`, and `fetchHitHistoryList`.\n\n2. **Type Imports**: The code imports several types, including `Fetcher` from `swr`, and various annotation-related types from `@/app/components/app/annotation/type`.\n\n3. **Utility Imports**: The code imports utility functions `del`, `get`, and `post` from `./base`, which are likely used to make HTTP requests to the API endpoints.\n\n4. **Configuration Import**: The code imports the `ANNOTATION_DEFAULT` constant from `@/config`, which is likely used to provide default values for the annotation settings.\n\n5. **Batch Import and Progress Tracking**: The code includes two specialized functions, `annotationBatchImport` and `checkAnnotationBatchImportProgress`, which seem to handle the batch import of annotations and tracking the progress of the import process, respectively.\n\nOverall, the key focus of this code is to provide a set of utility functions that abstract the interaction with various annotation-related API endpoints, allowing the application to easily manage and interact with annotation data.",
    "overall_summary": "Here's an overall summary of the codebase:\n\n1. **Annotation Management**:\n   - The codebase provides functionality for managing annotations within an application.\n   - It includes methods to:\n     - Fetch the current annotation configuration for an application.\n     - Update the annotation status (enable/disable) and associated settings, such as the embedding model configuration and score threshold.\n     - Update the annotation score threshold for a specific setting.\n     - Query the status of an annotation-related job.\n     - Fetch a list of annotations for an application, including the ability to export the list.\n     - Add a new annotation to an application.\n     - Perform batch import of annotations.\n     - Check the progress of a batch import job.\n     - Edit an existing annotation.\n     - Delete an annotation.\n     - Fetch the hit history for a specific annotation.\n\n2. **API Structure**:\n   - The codebase uses the `swr` library for handling fetching and caching of data.\n   - It defines various API endpoints for interacting with the annotation-related functionalities, such as `apps/{appId}/annotation-setting`, `apps/{appId}/annotation-reply/{action}`, `apps/{appId}/annotations`, etc.\n   - It utilizes helper functions (`get`, `post`, `del`) from the `base` module to make HTTP requests to these endpoints.\n\n3. **Types and Constants**:\n   - The codebase imports and uses various types, such as `AnnotationEnableStatus`, `AnnotationItemBasic`, and `EmbeddingModelConfig`, which are likely defined in a separate module (`@/app/components/app/annotation/type`).\n   - It also references a constant `ANNOTATION_DEFAULT` from the `@/config` module, which seems to be the default value for the score threshold.\n\nIn summary, this codebase provides a set of functions to manage annotations within an application, including fetching and updating configuration, enabling/disabling annotations, handling batch imports, and querying annotation-related data.",
    "pseudocode": "Certainly! Here's the high-level pythonic pseudocode for the given code:\n\n```python\n# Import necessary types and functions\nfrom typing import Fetcher\nfrom api_utils import get, post, del\n\n# Define types for annotation-related data\nclass AnnotationEnableStatus:\n    pass\n\nclass AnnotationItemBasic:\n    pass\n\nclass EmbeddingModelConfig:\n    pass\n\n# Constants\nANNOTATION_DEFAULT = {\n    \"score_threshold\": 0,\n}\n\n# Function to fetch annotation configuration for an app\ndef fetch_annotation_config(app_id: str):\n    \"\"\"\n    Fetch the annotation configuration for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n    \n    Returns:\n        The annotation configuration for the app.\n    \"\"\"\n    return get(f\"apps/{app_id}/annotation-setting\")\n\n# Function to update annotation status for an app\ndef update_annotation_status(app_id: str, action: AnnotationEnableStatus, embedding_model: EmbeddingModelConfig = None, score: float = None):\n    \"\"\"\n    Update the annotation status for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n        action (AnnotationEnableStatus): The action to perform on the annotation.\n        embedding_model (EmbeddingModelConfig, optional): The embedding model configuration.\n        score (float, optional): The score threshold.\n    \n    Returns:\n        The result of the update operation.\n    \"\"\"\n    body = {\n        \"score_threshold\": score or ANNOTATION_DEFAULT[\"score_threshold\"],\n    }\n    if embedding_model:\n        body.update(embedding_model)\n    \n    return post(f\"apps/{app_id}/annotation-reply/{action}\", body=body)\n\n# Function to update annotation score for an app\ndef update_annotation_score(app_id: str, setting_id: str, score: float):\n    \"\"\"\n    Update the annotation score for the given app and setting.\n    \n    Args:\n        app_id (str): The ID of the app.\n        setting_id (str): The ID of the annotation setting.\n        score (float): The new score threshold.\n    \n    Returns:\n        The result of the update operation.\n    \"\"\"\n    return post(f\"apps/{app_id}/annotation-settings/{setting_id}\", body={\"score_threshold\": score})\n\n# Function to query the status of an annotation job\ndef query_annotation_job_status(app_id: str, action: AnnotationEnableStatus, job_id: str):\n    \"\"\"\n    Query the status of an annotation job for the given app and action.\n    \n    Args:\n        app_id (str): The ID of the app.\n        action (AnnotationEnableStatus): The action for which the job was performed.\n        job_id (str): The ID of the job.\n    \n    Returns:\n        The status of the annotation job.\n    \"\"\"\n    return get(f\"apps/{app_id}/annotation-reply/{action}/status/{job_id}\")\n\n# Function to fetch a list of annotations for an app\ndef fetch_annotation_list(app_id: str, params: dict):\n    \"\"\"\n    Fetch a list of annotations for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n        params (dict): The query parameters for the annotation list.\n    \n    Returns:\n        The list of annotations.\n    \"\"\"\n    return get(f\"apps/{app_id}/annotations\", params=params)\n\n# Function to fetch the export list of annotations for an app\ndef fetch_export_annotation_list(app_id: str):\n    \"\"\"\n    Fetch the export list of annotations for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n    \n    Returns:\n        The export list of annotations.\n    \"\"\"\n    return get(f\"apps/{app_id}/annotations/export\")\n\n# Function to add a new annotation for an app\ndef add_annotation(app_id: str, annotation: AnnotationItemBasic):\n    \"\"\"\n    Add a new annotation for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n        annotation (AnnotationItemBasic): The annotation data to be added.\n    \n    Returns:\n        The result of the add operation.\n    \"\"\"\n    return post(f\"apps/{app_id}/annotations\", body=annotation)\n\n# Function to import annotations in batch for an app\ndef annotate_batch_import(url: str, body: dict):\n    \"\"\"\n    Import annotations in batch for the given app.\n    \n    Args:\n        url (str): The URL for the batch import operation.\n        body (dict): The data to be sent in the request body.\n    \n    Returns:\n        The job ID and job status for the batch import operation.\n    \"\"\"\n    return post(url, body=body, body_stringify=False, delete_content_type=True)\n\n# Function to check the progress of a batch import job for an app\ndef check_batch_import_progress(job_id: str, app_id: str):\n    \"\"\"\n    Check the progress of a batch import job for the given app.\n    \n    Args:\n        job_id (str): The ID of the job.\n        app_id (str): The ID of the app.\n    \n    Returns:\n        The job ID and job status for the batch import operation.\n    \"\"\"\n    return get(f\"apps/{app_id}/annotations/batch-import-status/{job_id}\")\n\n# Function to edit an existing annotation for an app\ndef edit_annotation(app_id: str, annotation_id: str, annotation: AnnotationItemBasic):\n    \"\"\"\n    Edit an existing annotation for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n        annotation_id (str): The ID of the annotation to be edited.\n        annotation (AnnotationItemBasic): The updated annotation data.\n    \n    Returns:\n        The result of the edit operation.\n    \"\"\"\n    return post(f\"apps/{app_id}/annotations/{annotation_id}\", body=annotation)\n\n# Function to delete an annotation for an app\ndef delete_annotation(app_id: str, annotation_id: str):\n    \"\"\"\n    Delete an annotation for the given app.\n    \n    Args:\n        app_id (str): The ID of the app.\n        annotation_id (str): The ID of the annotation to be deleted.\n    \n    Returns:\n        The result of the delete operation.\n    \"\"\"\n    return del(f\"apps/{app_id}/annotations/{annotation_id}\")\n\n# Function to fetch the hit history list for an annotation\ndef fetch_hit_history_list(app_id: str, annotation_id: str, params: dict):\n    \"\"\"\n    Fetch the hit history list for the given annotation and app.\n    \n    Args:\n        app_id (str): The ID of the app.\n        annotation_id (str): The ID of the annotation.\n        params (dict): The query parameters for the hit history list.\n    \n    Returns:\n        The list of hit histories for the annotation.\n    \"\"\"\n    return get(f\"apps/{app_id}/annotations/{annotation_id}/hit-histories\", params=params)\n```\n\nThis pseudocode provides a high-level overview of the functionality of the given code, including the main functions and their purpose. The comments explain the purpose of each function and the input/output parameters. The code is written in a Pythonic style, using type annotations and following best practices for function naming and documentation.",
    "import_relationships": "Imports found:\nimport type { Fetcher } from 'swr'\nimport { del, get, post } from './base'\nimport type { AnnotationEnableStatus, AnnotationItemBasic, EmbeddingModelConfig } from '@/app/components/app/annotation/type'\nimport { ANNOTATION_DEFAULT } from '@/config'"
}